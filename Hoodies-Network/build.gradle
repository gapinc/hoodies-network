plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'org.jetbrains.dokka'
    id 'jacoco'
    id 'org.ajoberstar.git-publish'
    id 'kotlin-kapt'
}
apply from: '../jacoco.gradle'

def moduleArtifactId = 'hoodies-networkandroid'
def moduleGroupId = 'com.gap.androidlibraries'
def versionName = '1.0.0'

android {
    compileSdk 32

    defaultConfig {
        minSdk 28
        targetSdk 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true

        unitTests.all {
            finalizedBy jacocoTestReport
        }
        jacocoTestReport {
            reports {
                xml.enabled true
            }
        }
    }

    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        testLogging {
            events("passed", "skipped", "failed")
        }

        maxParallelForks = 1

    }

}

publishing {
    publications {
        aar(MavenPublication) {
            groupId moduleGroupId
            version versionName
            artifactId moduleArtifactId
            afterEvaluate {
                artifact bundleReleaseAar
            }
            //generate pom nodes for dependencies
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                }
            }
        }
    }
}



dependencies {
    implementation "androidx.core:core-ktx:1.6.0"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
    implementation "androidx.compose.runtime:runtime:1.1.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api 'com.google.code.gson:gson:2.8.8'
    implementation files('libs/http-2.2.1.jar')
    implementation files('libs/sun-common-server.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'org.mockito:mockito-android:4.8.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'androidx.room:room-runtime:2.4.2'
    annotationProcessor 'androidx.room:room-compiler:2.4.2'
    kapt("androidx.room:room-compiler:2.4.2")
}

dokkaJavadoc {
    outputDirectory.set(file("${rootDir}/dokka"))
}

allprojects {
    configurations.all {
        resolutionStrategy.force 'org.objenesis:objenesis:2.6'
    }
}

gitPublishPush {}

